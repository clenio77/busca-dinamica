name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Segunda-feira às 2h

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Job de qualidade de código
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run Prettier check
        run: npx prettier --check "**/*.{js,jsx,json,md}"
        
      - name: Check for security vulnerabilities
        run: npm audit --audit-level moderate
        
      - name: Run tests
        run: npm test -- --coverage --watchAll=false
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job de build e teste
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run all tests
        run: npm run ci
        
      - name: Build application
        run: npm run build
        
      - name: Test build output
        run: |
          # Verificar se o build foi criado
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          
          # Verificar arquivos essenciais
          if [ ! -f "build/index.html" ]; then
            echo "index.html not found in build!"
            exit 1
          fi
          
          echo "Build validation passed!"

  # Job de segurança
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Job de deploy automático (apenas na main)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Deploy to Render
        env:
          RENDER_TOKEN: ${{ secrets.RENDER_TOKEN }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          # Deploy para Render (se configurado)
          if [ -n "$RENDER_TOKEN" ] && [ -n "$RENDER_SERVICE_ID" ]; then
            echo "Deploying to Render..."
            # Implementar deploy para Render aqui
          else
            echo "Render deployment not configured, skipping..."
          fi

  # Job de scraper semanal (agendado)
  weekly-scraper:
    name: Weekly Scraper
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run weekly scraper
        env:
          RENDER_APP_URL: ${{ secrets.RENDER_APP_URL }}
          ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          if [ -n "$RENDER_APP_URL" ] && [ -n "$ADMIN_TOKEN" ]; then
            echo "Running weekly scraper..."
            # Executar scraper via API
            curl -X POST "$RENDER_APP_URL/api/admin/scraper/run" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $ADMIN_TOKEN" \
              -d '{"startFrom": 30000000, "maxCEPs": 500}'
          else
            echo "Weekly scraper not configured, skipping..."
          fi

  # Job de notificação
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, security-scan]
    if: always()
    
    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "One or more jobs failed!"
          # Implementar notificação (Slack, Discord, etc.)
          
      - name: Notify on success
        if: success()
        run: |
          echo "All jobs completed successfully!"
          # Implementar notificação de sucesso
