openapi: 3.0.3
info:
  title: Busca Dinâmica 2.0 API
  description: |
    API completa para busca inteligente de endereços brasileiros.
    
    ## Características
    - Busca avançada por CEP, rua, bairro e cidade
    - Filtros por estado e cidade
    - Validação e sanitização de entrada
    - Rate limiting e segurança
    - Métricas e monitoramento
    
    ## Autenticação
    A maioria dos endpoints não requer autenticação. Endpoints administrativos requerem token Bearer.
    
    ## Rate Limiting
    - Geral: 30 requests/minuto
    - Busca: 60 requests/minuto
    - API: 100 requests/minuto
    
    ## Códigos de Resposta
    - 200: Sucesso
    - 400: Erro de validação
    - 404: Não encontrado
    - 429: Rate limit excedido
    - 500: Erro interno do servidor
  version: 2.0.0
  contact:
    name: Suporte Busca Dinâmica
    email: suporte@buscadinamica.com
    url: https://github.com/clenio77/busca-dinamica
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Servidor de desenvolvimento
  - url: https://buscadinamica.com
    description: Servidor de produção

tags:
  - name: Busca
    description: Endpoints de busca de endereços
  - name: CEP
    description: Endpoints específicos para CEP
  - name: Filtros
    description: Endpoints para listar filtros disponíveis
  - name: Monitoramento
    description: Endpoints de monitoramento e métricas
  - name: Admin
    description: Endpoints administrativos (requer autenticação)

paths:
  /api/cep/search:
    get:
      tags:
        - Busca
      summary: Buscar endereços
      description: |
        Busca endereços por termo de pesquisa com filtros opcionais.
        
        ### Exemplos de uso:
        - Buscar por rua: `?q=avenida paulista`
        - Filtrar por cidade: `?q=rua&cidade=São Paulo`
        - Filtrar por estado: `?q=avenida&estado=SP`
        - Combinação: `?q=rua&cidade=São Paulo&estado=SP`
      parameters:
        - name: q
          in: query
          required: true
          description: Termo de busca (mínimo 2 caracteres)
          schema:
            type: string
            minLength: 2
            maxLength: 100
          example: "avenida paulista"
        - name: cidade
          in: query
          required: false
          description: Filtrar por cidade específica
          schema:
            type: string
            maxLength: 50
          example: "São Paulo"
        - name: estado
          in: query
          required: false
          description: Filtrar por estado (sigla)
          schema:
            type: string
            pattern: '^[A-Z]{2}$'
          example: "SP"
        - name: limit
          in: query
          required: false
          description: Limite de resultados (padrão 50, máximo 100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          example: 20
        - name: offset
          in: query
          required: false
          description: Offset para paginação
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
      responses:
        '200':
          description: Busca realizada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Endereco'
                    example:
                      - cep: "01310-100"
                        logradouro: "Avenida Paulista"
                        bairro: "Bela Vista"
                        cidade: "São Paulo"
                        estado: "SP"
                        complemento: ""
                  total:
                    type: integer
                    description: Total de resultados encontrados
                    example: 150
                  limit:
                    type: integer
                    description: Limite aplicado
                    example: 20
                  offset:
                    type: integer
                    description: Offset aplicado
                    example: 0
                  query:
                    type: string
                    description: Termo de busca utilizado
                    example: "avenida paulista"
        '400':
          description: Erro de validação
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "Termo de busca deve ter pelo menos 2 caracteres"
                code: "VALIDATION_ERROR"
        '429':
          description: Rate limit excedido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "Muitas requisições. Tente novamente em 1 minuto."
                code: "RATE_LIMIT_EXCEEDED"
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/cep/{cep}:
    get:
      tags:
        - CEP
      summary: Buscar endereço por CEP
      description: |
        Busca um endereço específico pelo CEP.
        
        ### Formato do CEP:
        - Com hífen: `12345-678`
        - Sem hífen: `12345678`
        - Com pontos: `12.345-678`
      parameters:
        - name: cep
          in: path
          required: true
          description: CEP a ser buscado
          schema:
            type: string
            pattern: '^[0-9]{5}-?[0-9]{3}$'
          example: "01310-100"
      responses:
        '200':
          description: CEP encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Endereco'
        '400':
          description: CEP inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "CEP inválido. Use o formato 12345-678 ou 12345678"
                code: "INVALID_CEP"
        '404':
          description: CEP não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "CEP não encontrado"
                code: "CEP_NOT_FOUND"

  /api/cep/cities:
    get:
      tags:
        - Filtros
      summary: Listar cidades
      description: Retorna lista de todas as cidades disponíveis para filtro
      parameters:
        - name: estado
          in: query
          required: false
          description: Filtrar cidades por estado
          schema:
            type: string
            pattern: '^[A-Z]{2}$'
          example: "SP"
        - name: limit
          in: query
          required: false
          description: Limite de resultados
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          example: 50
      responses:
        '200':
          description: Lista de cidades
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: string
                    example: ["São Paulo", "Rio de Janeiro", "Belo Horizonte"]
                  total:
                    type: integer
                    example: 5565

  /api/cep/states:
    get:
      tags:
        - Filtros
      summary: Listar estados
      description: Retorna lista de todos os estados brasileiros
      responses:
        '200':
          description: Lista de estados
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: string
                    example: ["SP", "RJ", "MG", "RS", "PR"]

  /health:
    get:
      tags:
        - Monitoramento
      summary: Health check básico
      description: Verifica se o serviço está funcionando
      responses:
        '200':
          description: Serviço funcionando
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                  uptime:
                    type: number
                    description: Tempo de funcionamento em segundos
                    example: 3600

  /health/detailed:
    get:
      tags:
        - Monitoramento
      summary: Health check detalhado
      description: Verificação detalhada do status do sistema
      responses:
        '200':
          description: Status detalhado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                  database:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "connected"
                      responseTime:
                        type: number
                        description: Tempo de resposta em ms
                        example: 15
                  memory:
                    type: object
                    properties:
                      used:
                        type: number
                        description: Memória usada em MB
                        example: 128
                      total:
                        type: number
                        description: Memória total em MB
                        example: 512
                  version:
                    type: string
                    example: "2.0.0"

  /monitoring/summary:
    get:
      tags:
        - Monitoramento
      summary: Resumo de métricas
      description: |
        Resumo das métricas do sistema.
        Requer autenticação básica.
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Resumo de métricas
          content:
            application/json:
              schema:
                type: object
                properties:
                  system:
                    type: object
                    properties:
                      uptime:
                        type: number
                      cpu:
                        type: number
                      memory:
                        type: number
                  application:
                    type: object
                    properties:
                      requests:
                        type: number
                      errors:
                        type: number
                      responseTime:
                        type: number
                  business:
                    type: object
                    properties:
                      searches:
                        type: number
                      successRate:
                        type: number
                  security:
                    type: object
                    properties:
                      attacks:
                        type: number
                      rateLimits:
                        type: number
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Endereco:
      type: object
      required:
        - cep
        - logradouro
        - bairro
        - cidade
        - estado
      properties:
        cep:
          type: string
          description: CEP no formato 12345-678
          example: "01310-100"
        logradouro:
          type: string
          description: Nome da rua/avenida
          example: "Avenida Paulista"
        bairro:
          type: string
          description: Nome do bairro
          example: "Bela Vista"
        cidade:
          type: string
          description: Nome da cidade
          example: "São Paulo"
        estado:
          type: string
          description: Sigla do estado
          example: "SP"
        complemento:
          type: string
          description: Complemento do endereço
          example: "Próximo ao Shopping Paulista"
          nullable: true

    Error:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Mensagem de erro descritiva
          example: "Erro de validação"
        code:
          type: string
          description: Código de erro para programação
          example: "VALIDATION_ERROR"
        details:
          type: object
          description: Detalhes adicionais do erro
          nullable: true

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: Autenticação básica para endpoints de monitoramento
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT para endpoints administrativos

security:
  - BasicAuth: []
  - BearerAuth: []
